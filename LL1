/**
 * to implement the nodes of linkedlist we need Node class
 * with variables to store the address of next node (its taken as object) and the present value
 */
class Node
{
    int value;
    Node next;
    public Node(int v)
    {
        value=v;
    }
    public Node(int value,Node next)
    {
        this.value=value;
        this.next=next;
    }
}
public class LinkedList
{
    private Node head,tail;//head and tail pointers and middle nodes are not directly accessible
    // they need to be accessed through head (Single Directed LinkedList)
    private int size;
    public LinkedList()
    {
        this.size=0;
    }
    public void insertFirst(int val)
    {
        Node node=new Node(val);
        node.next=head;
        head=node;
        if(tail==null)
            tail=head;
        size++;
    }
    public void insertLast(int val)
    {
        if(tail==null)
        {
            insertFirst(val);
            return;
        }
        Node node=new Node(val);
        tail.next=node;
        tail=node;
        size++;
    }
    public void insert(int val,int index)
    {
        if(index==0)
        {
            insertFirst(val);
            return;
        }
        if(index==size)
        {
            insertLast(val);
            return;
        }
        Node temp=head;
        for(int i=1;i<index;i++)
            temp=temp.next;
        Node node=new Node(val,temp.next);
        temp.next=node;
        size++;
    }
    public void display()
    {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.value+"->");
            temp=temp.next;
        }
        System.out.println("END");
    }
    public int deleteFirst()
    {
        int val=head.value;
        head=head.next;
        if(head==null)
            tail=null;
        size--;
        return val;
    }
    public Node find(int value)
    {
        Node temp=head;
        while(temp!=null)
        {
            if(temp.value==value)
                return temp;
            temp=temp.next;
        }
        return null;
    }
    public Node get(int index)
    {
        Node temp=head;
        for(int i=1;i<=index;i++)
        {
            temp=temp.next;//after intiialisation temp=node at index i
        }
        return temp;
    }
    public int deleteLast()
    {
        if(size<=1)
        /**
         * how to see size=1 as?
         * that there is only one available node where it has index 0 and the next one is simply null(no node)
         * with index 1
         */
        return deleteFirst();
        Node secondLast=get(size-2);
        int val=tail.value;
        tail=secondLast;
        tail.next=null;
        size--;
        return val;
    }
    public int delete(int index)
    {
        if(index==0)
            return deleteFirst();
        if(index==size-1)
            return deleteLast();
        Node prev=get(index-1);
        int val=prev.next.value;
        prev.next=prev.next.next;
        size--;
        return val;
    }

    public static void main(String[] args) {
        LinkedList first=new LinkedList();
        first.insertLast(1);
        first.insertLast(3);
        first.display();
    }
}
